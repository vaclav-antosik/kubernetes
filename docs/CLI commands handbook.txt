-- Visual studio

# syntax=docker/dockerfile:1
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build-env
WORKDIR /app

# Copy csproj and restore as distinct layers
COPY *.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY . .
RUN dotnet publish -c Release -o out

# Build runtime image
FROM mcr.microsoft.com/dotnet/aspnet:5.0
ENV ASPNETCORE_URLS=http://*:5011
WORKDIR /app
COPY --from=build-env /app/out .
ENTRYPOINT ["dotnet", "MeAddOne.dll"]

-- docker

#build docker image
docker build -t me-add-one .


-- k8s

# apply yaml file
kubectl apply -f .\deployment.yaml

# gets
kubectl get pods -o wide

#port-forwarding
kubectl port-forward me-add-one-deployment-6584fd4469-jx729 5011:5011
kubectl port-forward svc/kiali -n istio-system 20001

#open pods shell
kubectl exec -it me-add-one-deployment-6584fd4469-jx729 -- /bin/sh

-- linux
read full file: cat file-name

-- git
git diff --word-diff=color

-- helm
helm install me-chart me-chart
helm uninstall me-chart

-- istio
istioctl install
kubectl label namespace default istio-injection=enabled

- Linux k8s commands

# Pods -> ConfigMap
kubectl get pods --all-namespaces -o jsonpath='{range .items[*]} {@.metadata.name}{" "}{@.spec.volumes[*].configMap.name}{end}' | xargs -n3 | uniq

# Pods -> Env.vars
kubectl get pods --all-namespaces -o jsonpath='{range .items[*]} {@.metadata.name}{" "}{@.spec.containers[*].env[*].valueFrom.configMapKeyRef.name}{end}' | xargs -n3 | uniq

# Pods -> Secret
kubectl get pods --all-namespaces -o jsonpath='{range .items[*]} {@.metadata.name}{" "}{@.spec.volumes[*].secret.secretName}{end}' | xargs -n3 | uniq

# Pods -> Secret
kubectl get pods --all-namespaces -o jsonpath='{range .items[*]} {@.metadata.name}{" "}{@.spec.containers[*].env[*].valueFrom.secretKeyRef.name}{end}' | xargs -n3 | uniq
